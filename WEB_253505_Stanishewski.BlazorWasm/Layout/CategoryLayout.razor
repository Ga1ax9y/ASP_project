@inject IDataService DataService﻿
@implements IDisposable

<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button" id="categoryDropdown" data-bs-toggle="dropdown" aria-expanded="false">
        @DataService.SelectedCategory?.Name
    </button>
    <ul class="dropdown-menu" aria-labelledby="categoryDropdown">
        <li>
            <a class="dropdown-item" href="javascript:void(0);" @onclick="() => OnCategorySelected(null)">
                Все категории
            </a>
        </li>
        @if (DataService.Categories?.Any() == true)
        {
            @foreach (var category in DataService.Categories)
            {
                <li>
                    <a class="dropdown-item" href="javascript:void(0);" @onclick="() => OnCategorySelected(category)">
                        @category.Name
                    </a>
                </li>
            }
        }
        else
        {
            <li>
                <a class="dropdown-item disabled" href="javascript:void(0);">
                    Нет доступных категорий
                </a>
            </li>
        }
    </ul>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        DataService.DataLoaded += StateHasChanged;
        await DataService.GetCategoryListAsync();
    }
    private async Task OnCategorySelected(Category category)
    {
        DataService.SelectedCategory = category;
        await DataService.GetProductListAsync();
        StateHasChanged(); // Обновление интерфейса после изменения данных
    }
    public void Dispose()
    {
        DataService.DataLoaded -= StateHasChanged;
    }
}